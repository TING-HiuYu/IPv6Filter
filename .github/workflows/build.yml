name: Build and Release

on:
  push:
    tags: [ 'v*' ]
  workflow_dispatch:  # 允许手动触发

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux x86_64 (for Debian server)
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: ipv6filter
            asset_name: ipv6filter-linux-x86_64
          
          # Linux x86_64 with musl (static linking)
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: ipv6filter
            asset_name: ipv6filter-linux-x86_64-musl
          
          # macOS ARM64 (for your M4 Mac)
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: ipv6filter
            asset_name: ipv6filter-macos-arm64
          
          # macOS Intel
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: ipv6filter
            asset_name: ipv6filter-macos-x86_64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: 1.82
        targets: ${{ matrix.target }}

    - name: Install cross-compilation tools (Linux musl)
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: |
        sudo apt-get update
        sudo apt-get install -y musl-tools

    - name: Build
      run: cargo build --release --target ${{ matrix.target }}

    - name: Rename binary
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          mv target/${{ matrix.target }}/release/${{ matrix.artifact_name }}.exe target/${{ matrix.target }}/release/${{ matrix.asset_name }}.exe
        else
          mv target/${{ matrix.target }}/release/${{ matrix.artifact_name }} target/${{ matrix.target }}/release/${{ matrix.asset_name }}
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: |
          target/${{ matrix.target }}/release/${{ matrix.asset_name }}*
          !target/${{ matrix.target }}/release/*.d

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Run tests
      run: cargo test

  release:
    name: Create Release
    needs: [build, test]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Download Docker image artifact
      uses: actions/download-artifact@v4
      with:
        name: ipv6filter-docker-image
        path: ./docker-artifacts/
      continue-on-error: true
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          linux-x86_64/ipv6filter-*
          linux-aarch64/ipv6filter-*
          windows-x86_64/ipv6filter-*
          macos-x86_64/ipv6filter-*
          macos-aarch64/ipv6filter-*
          docker-artifacts/ipv6filter-docker-image.tar
        tag_name: ${{ github.ref_name }}
        name: IPv6Filter ${{ github.ref_name }}
        body: |
          ## IPv6Filter ${{ github.ref_name }}
          
          ### 下载说明
          - 普通用户请下载对应平台的二进制文件
          - Docker用户可以使用 `docker pull ghcr.io/${{ github.repository }}:${{ github.ref_name }}` 或下载 `ipv6filter-docker-image.tar` 文件
          
          ### 支持的平台
          - Linux x86_64 / aarch64
          - Windows x86_64
          - macOS x86_64 / Apple Silicon
          - Docker (multi-arch)
          
        draft: false
        prerelease: false
