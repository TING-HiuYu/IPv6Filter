name: Docker Build

on:
  push:
    tags: [ 'v*' ]
  workflow_dispatch:  # 允许手动触发

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-docker:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker_related/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=oci,dest=/tmp/ipv6filter-docker-image.tar

    - name: Upload Docker image as artifact
      uses: actions/upload-artifact@v4
      with:
        name: ipv6filter-docker-image
        path: /tmp/ipv6filter-docker-image.tar
        retention-days: 30

  cleanup-docker-cache:
    name: Cleanup Docker Cache
    needs: [build-docker]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      actions: write
    steps:
    - name: Cleanup Docker Build Cache
      run: |
        echo "清理Docker构建Cache..."
        # 获取所有cache条目，特别是Docker相关的
        caches=$(gh api repos/${{ github.repository }}/actions/caches --paginate | jq -r '.actions_caches[] | select(.key | contains("buildkit")) | .id')
        
        # 删除Docker构建cache
        for cache_id in $caches; do
          echo "删除Docker cache ID: $cache_id"
          gh api repos/${{ github.repository }}/actions/caches/$cache_id -X DELETE || echo "删除cache $cache_id 失败"
        done
        
        echo "Docker Cache清理完成！"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
